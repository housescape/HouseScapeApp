server.port=8080
cloudinary.cloud_name=${CLOUDINARY_CLOUD_NAME}
cloudinary.api_key=${CLOUDINARY_API_KEY}
cloudinary.api_secret=${CLOUDINARY_API_SECRET}

#PostgreSQL
spring.datasource.url=${JDBC_DATABASE_URL}
spring.datasource.username=${JDBC_DATABASE_USERNAME}
spring.datasource.password=${JDBC_DATABASE_PASSWORD}

spring.datasource.hikari.connection-timeout=30000
spring.datasource.hikari.maximum-pool-size=1
spring.datasource.driver-class-name=org.postgresql.Driver
spring.datasource.maxActive=1
spring.datasource.testWhileIdle=true
spring.datasource.validationQuery=SELECT 1

#H2
#spring.h2.console.enabled=true
#spring.h2.console.path=/h2

#datasource
#spring.datasource.url=jdbc:h2:file:~/housescape5
#spring.datasource.data-username=sa
#spring.datasource.password=
#spring.datasource.driver-class-name=org.h2.Driver

# ===============================
# = JPA / HIBERNATE
# ===============================
spring.jpa.hibernate.ddl-auto=create-drop
spring.jpa.properties.hibernate.show_sql=true
spring.jpa.properties.hibernate.use_sql_comments=false
spring.jpa.properties.hibernate.format_lsql=false
# Show or not log for each sql query
spring.jpa.show-sql=true
# Hibernate ddl auto (create, create-drop, update): with "create-drop" the database
# schema will be automatically created afresh for every start of application
spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true
# Allows Hibernate to generate SQL optimized for a particular DBMS
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect